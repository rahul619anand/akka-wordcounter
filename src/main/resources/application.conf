# application specific settings
application {

  # app name
  name = wordcounter

  # directory which needs to be processed
  # specified directory should be present in src/main/resources
  log-directory = log

  # execution-mode = scheduler // runs every 30 seconds.
  # execution-mode = single // runs single SCAN
  execution-mode = single

  # only enabled when execution-mode = scheduler
  scheduled-interval-in-seconds = 30
}

# akka specific settings , default values of reference.conf in akka can be overridden here
akka {
  # extension for settings
  extensions = ["example.akka.wordcounter.utils.extension.Settings"]

  loglevel = "INFO"  # Options: OFF, ERROR, WARNING, INFO, DEBUG

  actor {

    # the actor's dispatcher and mailbox can also be overriden here
    deployment {
      /AggregatorActor {
        # since it continously receives message from FileParserActor
        mailbox = custom-bounded-mailbox
      }
      /FileParserActor {
        # since it continously does IO by reading lines of a file, we dont want IO to block word count operation
        # hence separate backing thread pool would be helpful
        dispatcher = custom-blocking-io-dispatcher
      }
    }

    #overriding default-dispatcher for actor system
    default-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 10
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 3.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 100
      }

      # Throughput defines the number of messages that are processed in a batch
      # before the thread is returned to the pool(i.e. thread jumps to the next actor).
      # Set to 1 for as fair as possible.
      throughput = 1

      # Setting to "FIFO" to use queue like peeking mode since we would want the events to be processed in sequence
      # START_OF_FILE
      # LINE
      # END_OF_FILE
      task-peeking-mode = "FIFO"

    }

    # set loglevel = "DEBUG" for activating below settings.
    debug {

      # logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = off

      # logging of actor lifecycle changes
      lifecycle = off

      # logging of unhandled messages
      unhandled = on

      # logging of all LoggingFSMs for events, transitions and timers
      fsm = off

      # logging of subscription changes on the eventStream
      event-stream = off
    }
  }


  # Loggers to register at boot time
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  #  It will filter the log events using the backend configuration (e.g. logback.xml) before they are published to the event bus.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # handles slow systems
  logger-startup-timeout = 1m

  # stdout-loglevel is only in effect during system startup and shutdown
  # setting it to OFF ensures that nothing gets logged during system startup or shutdown
  stdout-loglevel = "WARNING"

  # no of messages (i.e. dead-letter) to log at shutdown
  log-dead-letters = 10

  # dont log messages sent to dead-letter at shutdown
  log-dead-letters-during-shutdown = on

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off
}

# useful when you dont want your actor's mailbox to be overwhelmed by rate of incoming messages which is more than its processing power
# useful for data critical apps
custom-bounded-mailbox {

  mailbox-type = "akka.dispatch.BoundedMailbox"

  # If the mailbox is bounded then it uses this setting to determine its
  # capacity. The provided value must be positive.
  mailbox-capacity = 100000

  # If the mailbox is bounded then this is the timeout for enqueueing
  # in case the mailbox is full. Negative values signify infinite
  # timeout, which should be avoided as it bears the risk of dead-lock.
  mailbox-push-timeout-time = 10s

  # For Actor with Stash: The default capacity of the stash.
  # If negative (or zero) then an unbounded stash is used (default)
  # If positive then a bounded stash is used and the capacity is set using
  # the property
  stash-capacity = -1
}

# useful when performing IO
custom-blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}