group 'test.akka'
version '1.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

ext.junitPlatformVersion = '1.0.0-M4'
ext.junitJupiterVersion = '5.0.0-M4'

/*
Putting it in the buildscript closure ensures that the dependencies are available for use within the gradle build itself.
*/
buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
    }
}

/* The global level dependencies and repositories sections list dependencies that are required
 to building and runnning the source  etc.*/
repositories {
    mavenCentral()
}

dependencies {

    // logger implementation
    compile "ch.qos.logback:logback-classic:1.1.7"

    // https://mvnrepository.com/artifact/com.typesafe.akka/akka-actor_2.11
    compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.5.3'

    // https://mvnrepository.com/artifact/com.typesafe.akka/akka-slf4j_2.11
    compile group: 'com.typesafe.akka', name: 'akka-slf4j_2.11', version: '2.5.3'
    // already contains slf4j-api dependency jar


    // JUnit 5 Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
    testCompile("org.junit.platform:junit-platform-suite-api:${junitPlatformVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // https://mvnrepository.com/artifact/com.typesafe.akka/akka-testkit_2.11
    testCompile group: 'com.typesafe.akka', name: 'akka-testkit_2.11', version: '2.5.3'
}



// creates executable jar in build/libs directory
task createExecutableJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'WordCounter Executable Jar',
                'Implementation-Version': version,
                'Main-Class': 'example.akka.wordcounter.Main'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
